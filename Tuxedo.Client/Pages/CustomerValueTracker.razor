@page "/customer-value-tracker"
@using Tuxedo.Shared.Enums
@using static MudBlazor.Icons.Material
@inject HttpClient Http

<PageTitle>Customer Value Tracker</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <!-- Back Link -->
    <MudText Typo="Typo.body1" Class="mb-2">
        <MudLink Href="/companies" Color="Color.Primary">
            <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Class="mr-1" /> Back to all companies
        </MudLink>
    </MudText>

    <!-- Page Title -->
    <MudText Typo="Typo.h4" Class="mb-4">Customer Value Tracker</MudText>

    <!-- Action Buttons -->
    <MudStack Direction="Row" Spacing="2" Class="mb-4">
        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.PieChart">View ROI</MudButton>
        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.CompareArrows">Manage Data</MudButton>
        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" @onclick="OpenDrawer">Add Saving</MudButton>
    </MudStack>

    <!-- Table -->
    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else
    {
        <MudTable Items="@savings" Bordered="true" Hover="true">
            <HeaderContent>
                <MudTh>SAVING DATE</MudTh>
                <MudTh>DESCRIPTION</MudTh>
                <MudTh>CATEGORY</MudTh>
                <MudTh>STATUS</MudTh>
                <MudTh>SAVING</MudTh>
                <MudTh>FREQUENCY</MudTh>
                <MudTh>ACTIONS</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="SAVING DATE">@context.SavingDate.ToString("dd/MM/yyyy")</MudTd>
                <MudTd DataLabel="DESCRIPTION">@context.Description</MudTd>
                <MudTd DataLabel="CATEGORY">
                    <MudChip T="string" Color="Color.Default" Variant="Variant.Outlined">@context.Category</MudChip>
                </MudTd>
                <MudTd DataLabel="STATUS">
                    <MudChip T="string" Color="@context.StatusColor" Variant="Variant.Filled">@context.Status</MudChip>
                </MudTd>
                <MudTd DataLabel="SAVING">Â£@context.Saving.ToString("N2")</MudTd>
                <MudTd DataLabel="FREQUENCY">
                    <MudIcon Icon="@context.FrequencyIcon" Class="mr-1" /> @context.Frequency
                </MudTd>
                <MudTd DataLabel="ACTIONS">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" @onclick="() => EditSaving(context)" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="() => DeleteSaving(context)" />
                    @if (IsRecurring(context.Frequency))
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" @onclick="() => EditSeries(context)" />
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

<!-- Drawer -->
<MudDrawer Anchor="Anchor.Right" Open="@isDrawerOpen" Elevation="4" Class="mud-width-full mud-width-md" ClipMode="DrawerClipMode.Always">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">Add or Edit Saving</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Primary" @onclick="CloseDrawer" />
    </MudDrawerHeader>
    <MudDrawerContent>
        <MudForm>
            <MudTextField Label="Date" @bind-Value="selectedSaving.SavingDate" Type="MudBlazor.InputType.Date" />
            <MudTextField Label="Description" @bind-Value="selectedSaving.Description" />
            <MudTextField Label="Saving Amount" @bind-Value="selectedSaving.Saving" />
            <MudSelect T="Status" Label="Status" @bind-Value="selectedSaving.Status">
                @foreach (var status in Enum.GetValues<Status>())
                {
                    <MudSelectItem Value="status">@status</MudSelectItem>
                }
            </MudSelect>
            <MudStack Direction="Row" Spacing="2" Class="mt-4">
                <MudButton Variant="Variant.Text" Color="Color.Default" @onclick="CloseDrawer">Cancel</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="SaveSaving">Save</MudButton>
            </MudStack>
        </MudForm>
    </MudDrawerContent>
</MudDrawer>

@code {
    private List<SavingItem> savings = new();
    private bool isLoading = true;
    private bool isDrawerOpen = false;
    private SavingItem selectedSaving = new SavingItem();

    protected override async Task OnInitializedAsync()
    {
        await LoadSavingsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadSavingsAsync();
    }

    private async Task LoadSavingsAsync()
    {
        isLoading = true;
        try
        {
            // Call the API to fetch savings
            var apiSavings = await Http.GetFromJsonAsync<List<SavingItem>>("api/customersaving");
            if (apiSavings != null)
            {
                savings = apiSavings;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching savings: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OpenDrawer()
    {
        selectedSaving = new SavingItem
        {
            SavingDate = DateTime.Now,
            Description = string.Empty,
            Saving = 0,
            Status = Status.Forecasted
        };
        isDrawerOpen = true;
    }

    private void CloseDrawer()
    {
        isDrawerOpen = false;
    }

    private void SaveSaving()
    {
        // Save logic here
        CloseDrawer();
    }

    private bool IsRecurring(Frequency frequency)
    {
        return frequency != Frequency.OneOff;
    }

    private void EditSaving(SavingItem saving)
    {
        selectedSaving = saving;
        isDrawerOpen = true;
    }

    private void DeleteSaving(SavingItem saving)
    {
        // Implement delete saving logic
    }

    private void EditSeries(SavingItem saving)
    {
        // Implement edit series logic
    }

    private class SavingItem
    {
        public DateTime SavingDate { get; set; }
        public string Description { get; set; }
        public string Category { get; set; }
        public Status Status { get; set; }
        public Color StatusColor { get; set; }
        public decimal Saving { get; set; }
        public Frequency Frequency { get; set; }
        public string FrequencyIcon { get; set; }
    }
}