@page "/customer-value-tracker"
@using Tuxedo.Shared
@using Tuxedo.Shared.Enums
@using static MudBlazor.Icons.Material
@inject HttpClient Http

<PageTitle>Customer Value Tracker</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <!-- Back Link -->
    <MudText Typo="Typo.body1" Class="mb-2">
        <MudLink Href="/companies" Color="Color.Primary">
            <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Class="mr-1" /> Back to all companies
        </MudLink>
    </MudText>

    <!-- Title and Action Buttons -->
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
        <!-- Page Title -->
        <MudText Typo="Typo.h4">Customer Value Tracker</MudText>

        <!-- Action Buttons -->
        <div style="display: flex; gap: 8px;">
            <MudButton Color="Color.Primary" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.PieChart">
                View ROI
            </MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.CompareArrows">
                Manage Data
            </MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" @onclick="() => OpenDrawer(false)">
                Add Saving
            </MudButton>
        </div>
    </div>

    <!-- Table -->
    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else
    {
        <MudTable Items="@savings" Dense="true" Bordered="true" Hover="true">
            <HeaderContent>
                <MudTh>SAVING DATE</MudTh>
                <MudTh>DESCRIPTION</MudTh>
                <MudTh>CATEGORY</MudTh>
                <MudTh>STATUS</MudTh>
                <MudTh>SAVING</MudTh>
                <MudTh>FREQUENCY</MudTh>
                <MudTh>ACTIONS</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="SAVING DATE">@context.SavingDate.ToString("dd/MM/yyyy")</MudTd>
                <MudTd DataLabel="DESCRIPTION">@context.Description</MudTd>
                <MudTd DataLabel="CATEGORY">
                    <MudChip T="string" Color="Color.Default" Variant="Variant.Filled">@context.Category</MudChip>
                </MudTd>
                <MudTd DataLabel="STATUS">
                    <MudChip T="string" Color="Color.Default" Variant="Variant.Filled">@context.Status</MudChip>
                </MudTd>
                <MudTd DataLabel="SAVING">Â£@context.Amount.ToString("N2")</MudTd>
                <MudTd DataLabel="FREQUENCY">
                    <MudChip T="string" Color="Color.Default" Variant="Variant.Filled">@context.Frequency</MudChip>
                </MudTd>
                <MudTd DataLabel="ACTIONS">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" @onclick="() => OpenDrawer(true, context)" Style="margin-right: 2px;" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="() => DeleteSavingAsync(context)" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

<!-- Drawer -->
<MudDrawer Anchor="Anchor.Right" Open="@isDrawerOpen" Elevation="4" Class="mud-width-full mud-width-md" ClipMode="DrawerClipMode.Always">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">Add New Series</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Primary" @onclick="CloseDrawer" />
    </MudDrawerHeader>
    <MudDrawerContent>
        <MudForm>
            <!-- Frequency -->
            <MudSelect T="Frequency" Label="Frequency" @bind-Value="selectedSaving.Frequency">
                @foreach (var frequency in Enum.GetValues<Frequency>())
                {
                    <MudSelectItem Value="frequency">@frequency</MudSelectItem>
                }
            </MudSelect>

            <!-- Saving Amount -->
            <MudTextField Label="Saving Amount" @bind-Value="selectedSaving.Amount" Type="MudBlazor.InputType.Number" />

            <!-- Start Date -->
            <MudTextField Label="Start Date" @bind-Value="selectedSaving.SavingDate" Type="MudBlazor.InputType.Date" />

            <!-- Status -->
            <MudSelect T="Status" Label="Status (Default)" @bind-Value="selectedSaving.Status">
                @foreach (var status in Enum.GetValues<Status>())
                {
                    <MudSelectItem Value="status">@status</MudSelectItem>
                }
            </MudSelect>

            <!-- Category -->
            <MudTextField Label="Category" @bind-Value="selectedSaving.Category" />

            <!-- Value Added -->
            <MudTextField Label="Value Added" @bind-Value="selectedSaving.Description" Lines="3" />

            <!-- Buttons -->
            <MudStack Direction="Row" Spacing="2" Class="mt-4">
                <MudButton Variant="Variant.Text" Color="Color.Default" @onclick="CloseDrawer">Cancel</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="SaveSavingAsync">Save Series</MudButton>
            </MudStack>
        </MudForm>
    </MudDrawerContent>
</MudDrawer>

@code {
    private List<CustomerSavingPageModel> savings = new();
    private bool isLoading = true;
    private bool isDrawerOpen = false;
    private CustomerSavingPageModel selectedSaving = new CustomerSavingPageModel();
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSavingsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadSavingsAsync();
    }

    private async Task LoadSavingsAsync()
    {
        isLoading = true;
        try
        {
            // Fetch savings from the API
            var apiSavings = await Http.GetFromJsonAsync<List<CustomerSavingPageModel>>("api/customersaving");
            if (apiSavings != null)
            {
                savings = apiSavings;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching savings: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OpenDrawer(bool editMode = false, CustomerSavingPageModel? saving = null)
    {
        isEditMode = editMode;
        if (editMode && saving != null)
        {
            selectedSaving = saving;
        }
        else
        {
            selectedSaving = new CustomerSavingPageModel
            {
                SavingDate = DateTime.Now,
                Description = string.Empty,
                Amount = 0,
                Status = Status.Forecasted
            };
        }
        isDrawerOpen = true;
    }

    private void CloseDrawer()
    {
        isDrawerOpen = false;
    }

    private async Task SaveSavingAsync()
    {
        try
        {
            if (isEditMode)
            {
                // Update existing saving
                await Http.PutAsJsonAsync($"api/customersaving/{selectedSaving.ObjectId}", selectedSaving);
            }
            else
            {
                // Create new saving
                var response = await Http.PostAsJsonAsync("api/customersaving", selectedSaving);
                if (response.IsSuccessStatusCode)
                {
                    var createdSaving = await response.Content.ReadFromJsonAsync<CustomerSavingPageModel>();
                    if (createdSaving != null)
                    {
                        savings.Add(createdSaving);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving saving: {ex.Message}");
        }
        finally
        {
            CloseDrawer();
            await LoadSavingsAsync();
        }
    }

    private async Task DeleteSavingAsync(CustomerSavingPageModel saving)
    {
        try
        {
            var confirmed = await ShowConfirmationDialogAsync("Are you sure you want to delete this saving?");
            if (confirmed)
            {
                await Http.DeleteAsync($"api/customersaving/{saving.ObjectId}");
                savings.Remove(saving);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting saving: {ex.Message}");
        }
    }

    private async Task<bool> ShowConfirmationDialogAsync(string message)
    {
        // Implement a confirmation dialog (e.g., using MudBlazor DialogService)
        // For now, return true for simplicity
        return await Task.FromResult(true);
    }
}